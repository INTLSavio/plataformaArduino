<%- include ("../partials/header.ejs") %>
<%- include ("../partials/homenavbar.ejs") %>

<body>
    
    <div class="container justify-content-center">
        <div class="row">
          <div class="col">
            
          </div>
          <div class="col">
            
          </div>
          <div class="col-8 mt-5">
            <% if(quiz_msg == 'Você deve responder todas as perguntas') { %>
                <div class="alert alert-danger" style="width: 80%; display: flex; justify-content: center;"><%= quiz_msg %></div>
                <br>
            <% } %>
          </div>
          <div class="col">
           
          </div>
        </div>
    <!-- Slideshow container -->
    <div >
        
    </div>
    <h1>Questões</h1>
    <form action="/user/respostas" method="POST">
         
        <div id="slide-container">
            
            <div class="slide fade" id="item">
                <h5>1 - Responsável por fazer leituras digitais. Ele nos dirá se um botão, por exemplo, está ligado ou desligado. 
                        O que significa que esse comando, sempre retornará para o programa um estado baixo (LOW) ou alto (HIGH).
                </h5>

                <div>
                    <input type="radio" name="Questao1" value="1A" />
                    <label><strong>A -</strong> analogRead(pin)</label>
                </div>

                <div>
                    <input type="radio" name="Questao1" value="1B" />
                    <label><strong>B -</strong> digitalRead(pin)</label>
                </div>

                <div>
                    <input type="radio" name="Questao1" value="1C" />
                    <label><strong>C -</strong> analogWrite(pin)</label>
                </div>

                <div>
                    <input type="radio" name="Questao1" value="1D" />
                    <label><strong>D -</strong> digitalWrite(pin)</label>
                </div>
            </div>

            <div class="slide fade" id="item">
                <h5>2 - O digitalRead e o analogRead normalmente estão acoplados a alguma condição. Qual seria essa condição:</h5>

                <div>
                    <input type="radio" name="Questao2" value="2A" />
                    <label><strong>A -</strong> if</label>
                </div>

                <div>
                    <input type="radio" name="Questao2" value="2B" />
                    <label><strong>B -</strong> void loop</label>
                </div>

                <div>
                    <input type="radio" name="Questao2" value="2C" />
                    <label><strong>C -</strong> void setup</label>
                </div>

                <div>
                    <input type="radio" name="Questao2" value="2D" />
                    <label><strong>D -</strong> #define</label>
                </div>
            </div>

            <div class="slide fade" id="item">
                <h5>3 - Uma estrutura condicional faz comparações entre ________. Essa comparação é denominada de ___________. 
                    Por conta disso, é necessário se ter em mãos _______.
                </h5>

                <div>
                    <input type="radio" name="Questao3" value="3A" />
                    <label><strong>A -</strong> Os dados a serem conferidos; condição; informações;</label>
                </div>

                <div>
                    <input type="radio" name="Questao3" value="3B" />
                    <label><strong>B -</strong> . Condição; informações; os dados a serem conferidos;</label>
                </div>

                <div>
                    <input type="radio" name="Questao3" value="3C" />
                    <label><strong>C -</strong>Informações; condição; os dados a serem conferidos;</label>
                </div>

                <div>
                    <input type="radio" name="Questao3" value="3D" />
                    <label><strong>D -</strong> Os dados a serem conferidos; informações; condição;</label>
                </div>
            </div>

            <div class="slide fade" id="item">
                <h5>4 - Em qual ocasião é recomendado se utilizar a estrutura millis():</h5>

                <div>
                    <input type="radio" name="Questao4" value="4A" />
                    <label><strong>A -</strong> Todas às vezes que quiser que algo aconteça, sendo condicionado a uma faixa de tempo.</label>
                </div>

                <div>
                    <input type="radio" name="Questao4" value="4B" />
                    <label><strong>B -</strong> Todas às vezes que quiser que algo aconteça, sendo condicionado a uma faixa de valores recebidos pela entrada.</label>
                </div>

                <div>
                    <input type="radio" name="Questao4" value="4C" />
                    <label><strong>C -</strong> Todas às vezes que iniciar o arduino, pois sem essa estrutura o programa não funciona corretamente</label>
                </div>

                <div>
                    <input type="radio" name="Questao4" value="4D" />
                    <label><strong>D -</strong> Todas às vezes que quiser fazer comparações entre informações.</label>
                </div>
            </div>

            <div class="slide fade" id="item">
                <h5>5 - As _________________são aquelas que podem ser vistas e manipuladas apenas dentro do trecho de código que ela foi declarada. 
                    Por exemplo, se uma variável foi declarada dentro do void setup, ela poderá ser usada apenas dentro do void setup, já, 
                    se sua declaração foi realizada no void loop, apenas esse trecho de código saberá de sua existência. Já as____________, 
                    uma vez que elas foram declaradas, elas podem ser mencionadas e sofrer manipulações em qualquer trecho de código.
                </h5>

                <div>
                    <input type="radio" name="Questao5" value="5A" />
                    <label><strong>A -</strong> Variáveis do tipo inteiro, Variáveis do tipo ponto flutuante</label>
                </div>

                <div>
                    <input type="radio" name="Questao5" value="5B" />
                    <label><strong>B -</strong> Variáveis globais, variáveis locais.</label>
                </div>

                <div>
                    <input type="radio" name="Questao5" value="5C" />
                    <label><strong>C -</strong> Variáveis do tipo ponto flutuante, Variáveis do tipo inteiro</label>
                </div>

                <div>
                    <input type="radio" name="Questao5" value="5D" />
                    <label><strong>D -</strong> Variáveis locais, variáveis globais.</label>
                </div>
            </div>


            <a href="#" class="prev" title="Previous">&#10094</a>
            <a href="#" class="next" title="Next">&#10095</a>
        </div>
        
        <div class="dots-container">
            <span class="dot"></span>
            <span class="dot"></span>
            <span class="dot"></span>
            <span class="dot"></span>
            <span class="dot"></span>
        </div>
        <div style="display: flex; flex-direction: row;">
            <button type="submit" id="buttonEnviar" class="btn btn-outline-light">Enviar</button>
            <img src="/img/dino.png" style=" margin-left: 26%; height: 2%; width: 20%;">
        </div>
    </form>

</body>

<%- include ("../partials/footer.ejs") %>
<style>
    @keyframes fade {
        0% {
            opacity: 0;
        }
        100% {
            opacity: 1;
        }
    }
    * {
        padding: 0;
        border: 0;
        box-sizing: border-box;
    }
    body {
        height: 100%;
        background-color: #343a40;
    }
    body h1 {
        padding-top: 2%;
        text-align: center;
        color: #FFF;
        font-weight: bold;
        padding-bottom: 2%;
    }
    #slide-container {
        background-color: #D3D3D3;
        display: flex;
        justify-content: center;
        align-items: center;
        max-width: 1000px;
        margin: auto;
        position: relative;
        border: 1px solid black;
    }
    #slide-container .slide {
        display: none;
        width: 90%;
    }
    #slide-container .slide.fade {
        animation: fade 0.5s cubic-bezier(0.55, 0.085, 0.68, 0.53) both;
    }
    #slide-container .slide img {
        width: 100%;
    }
    #slide-container .prev,
    #slide-container .next {
        cursor: pointer;
        position: absolute;
        top: 50%;
        width: auto;
        margin-top: -22px;
        padding: 16px;
        color: black;
        font-weight: bold;
        font-size: 20px;
        transition: all 0.6s ease;
        border-radius: 0 3px 3px 0;
        user-select: none;
    }
    #slide-container .prev:hover,
    #slide-container .next:hover {
        background-color: rgba(0, 0, 0, 0.8);
        color: white;
    }
    #slide-container .prev {
        left: 2px;
    }
    #slide-container .next {
        right: 2px;
    }
    .dots-container {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 10px;
    }
    .dots-container .dot {
        cursor: pointer;
        margin: 5px;
        width: 20px;
        height: 20px;
        color: #333;
        border-radius: 50%;
        background-color: #dfd6ce;
    }
    .dots-container .dot.active {
        border: 2px solid blue;
    }
    #item {
        padding-left: 5%;
        padding-top: 10%;
        height: 500px;
    }
    #buttonEnviar{
        margin-left: 46%;
        width: 100px;
        height: 50px;
        border-radius: 8px;
        font-weight: bold;
    }
</style>

<script>
    var currentSlide = 0;
    const slides = document.querySelectorAll(".slide")
    const dots = document.querySelectorAll('.dot')
    const init = (n) => {
        slides.forEach((slide) => {
            slide.style.display = "none"
            dots.forEach((dot) => {
                dot.classList.remove("active")
            })
        })
        slides[n].style.display = "block"
        dots[n].classList.add("active")
    }
    document.addEventListener("DOMContentLoaded", init(currentSlide))
    const next = () => {
        currentSlide >= slides.length - 1 ? currentSlide = 0 : currentSlide++
        init(currentSlide)
    }
    const prev = () => {
        currentSlide <= 0 ? currentSlide = slides.length - 1 : currentSlide--
        init(currentSlide)
    }
    document.querySelector(".next").addEventListener('click', next)
    document.querySelector(".prev").addEventListener('click', prev)
    dots.forEach((dot, index) => {
        dot.addEventListener("click", () => {
            init(index)
            currentSlide = i
        })
    })
</script>